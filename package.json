{
  "name": "dynamic-import-references",
  "displayName": "Dynamic Import References",
  "description": "Enhances VS Code's 'Find All References' feature by including dynamic and lazy imports in JavaScript and TypeScript files.",
  "publisher": "bubablue00",
  "version": "1.2.0",
  "icon": "icon.png",
  "engines": {
    "vscode": "^1.104.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/bubablue/dynamic-import-references"
  },
  "categories": [
    "Programming Languages",
    "Language Packs",
    "Other"
  ],
  "activationEvents": [
    "onLanguage:javascript",
    "onLanguage:typescript",
    "onLanguage:javascriptreact",
    "onLanguage:typescriptreact"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "dynamic-import-references.findReferences",
        "title": "Find References Including Dynamic Imports"
      }
    ],
    "configuration": {
      "title": "Dynamic Import References",
      "properties": {
        "dynamicImportReferences.customMatchers": {
          "type": "array",
          "default": [],
          "description": "Custom matcher configurations for dynamic import detection.",
          "items": {
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": ["named", "default", "member", "identifier"],
                "description": "How the function is referenced: 'named' = named import, 'default' = default import, 'member' = namespace member (e.g. R.lazy), 'identifier' = local/project utility."
              },
              "name": {
                "type": "string",
                "description": "Function or identifier name to detect (e.g. 'lazy', 'loadable', 'myLazy'). Required for 'named', 'member', and 'identifier'."
              },
              "source": {
                "type": "string",
                "description": "Module specifier used in import statements (e.g. 'react', '@loadable/component'). Required for 'named', 'default', and 'member'."
              },
              "namespace": {
                "type": "string",
                "description": "Namespace identifier when kind = 'member' (e.g. 'R' in R.lazy)."
              },
              "member": {
                "type": "string",
                "description": "Member function name when kind = 'member' (e.g. 'lazy' in R.lazy)."
              },
              "allowAlias": {
                "type": "boolean",
                "default": true,
                "description": "Allow matches even if the import is aliased (e.g. { lazy as myLazy })."
              },
              "requireImport": {
                "type": "boolean",
                "default": true,
                "description": "Require the function to be imported from a module rather than declared locally."
              },
              "memberAccess": {
                "type": "boolean",
                "default": false,
                "description": "Back-compat: allow member access patterns (e.g. MyLib.lazy). Usually implied when kind = 'member'."
              }
            },
            "required": ["kind"]
          }
        }
      }
    }
  },
  "tasks": [
    {
      "label": "watch:esbuild",
      "type": "shell",
      "command": "npm run watch:esbuild",
      "isBackground": true,
      "problemMatcher": {
        "owner": "typescript",
        "pattern": {
          "regexp": "^(.*):(\\d+):(\\d+): (error|warning): (.*)$",
          "file": 1,
          "line": 2,
          "column": 3,
          "severity": 4,
          "message": 5
        }
      }
    }
  ],
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src",
    "test": "jest --passWithNoTests",
    "generate-changelog": "github_changelog_generator -u bubablue -p dynamic-import-references -t $GITHUB_TOKEN"
  },
  "devDependencies": {
    "@babel/parser": "^7.27.7",
    "@babel/traverse": "^7.27.7",
    "@babel/types": "^7.27.7",
    "@types/for-each": "^0.3.3",
    "@types/jest": "^30.0.0",
    "@types/mocha": "^10.0.10",
    "@types/node": "~24.7.0",
    "@types/object-inspect": "^1.13.0",
    "@types/tape": "^5.8.1",
    "@types/vscode": "^1.104.0",
    "@typescript-eslint/eslint-plugin": "^8.46.0",
    "@typescript-eslint/parser": "^8.46.0",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2",
    "auto-changelog": "^2.5.0",
    "encoding": "^0.1.13",
    "es-value-fixtures": "^1.7.1",
    "esbuild": "^0.25.10",
    "eslint": "^9.37.0",
    "evalmd": "^0.0.19",
    "in-publish": "^2.0.1",
    "jest": "^30.2.0",
    "npm-run-all": "^4.1.5",
    "npmignore": "^0.3.1",
    "nyc": "^17.1.0",
    "safe-publish-latest": "^2.0.0",
    "tape": "^5.9.0",
    "ts-jest": "^29.4.4",
    "typescript": "^5.9.3"
  }
}
